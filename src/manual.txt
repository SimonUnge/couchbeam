Host = "localhost".
Port = 5002.
Name = "reg_a".
   application:start(sasl),
   application:start(ibrowse),
   application:start(crypto),
   application:start(couchbeam),
   Server = couchbeam:server_connection(Host, Port),
{ok, Db} = couchbeam:open_or_create_db(Server, Name),
{ok, Doc} = couchbeam:open_doc(Db,"a303813b3c5d308b96a625ee451e6c92").


How it looks for erlang:

{ok, Doc} = couchbeam:open_doc(Db,"0fa10eb459328173bd882aacad3e8ccc").
{ok,{[{<<"_id">>,<<"0fa10eb459328173bd882aacad3e8ccc">>},
      {<<"_rev">>,<<"1-e078212dcc3fae8f02c5f787b7293572">>},
      {<<"step">>,0},
      {<<"job">>,
       [{[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 0">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 1">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 2">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 3">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 4">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 5">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 6">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 7">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 8">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]},
        {[{<<"target">>,<<"any">>},
          {<<"do">>,<<"echo job2 step 9">>},
          {<<"claimed_by">>,null},
          {<<"winner">>,null}]}]},
      {<<"updated_at">>,<<"2011-05-25T10:11:28+02:00">>},
      {<<"created_at">>,<<"2011-05-25T10:11:28+02:00">>},
      {<<"couchrest-type">>,<<"Job">>}]}}


Retryis looks like this:{
                          [
                            {<<"max_retries">>,3},
                            {<<"max_time">>,null},
                            {<<"sleep">>,null},
                            {<<"sleep_factor">>,1.5},
                            {<<"sleep_max">>,null}
                          ]
                        }





Notes:

Improvments:
priority,
filters,
workers dying when executing work,


What to test:

Ett jobb, där varje steg är sleep i X sekunder. Testa hur långt tid det tar på en nod, flera noder. fast
det borde inte vara någon direkt skillnad där. Any node-steg

Testa många jobb, där varje steg är sleep i X sekunder. Räkna ut hur lång tid det borde ta, mot hur lång 
tid det tog. Här kan replikerings-tiden spela in. Testa att claima hos jobb-skaparen. Any node-steg

Testa många jobb, där varje step är sleep i X sekunder. Testa så att det är fler jobb än workers. 
Lägga till noder och se skillnaden i hastighet. Any node-steg

Testa jobb med flera olika targets.

Stress testa couchDB med massor av jobb.

Testa hur lång tid det tar om allt går som det ska.
